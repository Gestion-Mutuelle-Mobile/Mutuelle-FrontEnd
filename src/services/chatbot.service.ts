import { GoogleGenerativeAI } from '@google/generative-ai';
import { GEMINI_CONFIG } from '../constants/config';

// üîß IMPORTANT: Remplace par ta vraie cl√© API
const GEMINI_API_KEY = GEMINI_CONFIG.API_KEY; // ‚ö†Ô∏è EXEMPLE - utilise ta vraie cl√©
const genAI = new GoogleGenerativeAI(GEMINI_API_KEY);

export interface ChatMessage {
  id: string;
  content: string;
  isUser: boolean;
  timestamp: Date;
}

export interface ChatbotContext {
  userInfo: any;
  memberData: any;
  dashboardData: any;
  sessionData: any;
  exerciseData: any;
  configData: any;
}

// üîß G√©n√©ration du prompt syst√®me avec gestion d'erreurs
const generateSystemPrompt = (context: ChatbotContext): string => {
  try {
    const currentDate = new Date().toLocaleDateString('fr-FR', {
      weekday: 'long',
      year: 'numeric',
      month: 'long',
      day: 'numeric'
    });

    return `# Assistant IA - Mutuelle ENSPY

Tu es l'assistant intelligent de la mutuelle ENSPY, un chatbot expert qui aide les membres et administrateurs avec toutes leurs questions relatives √† la mutuelle.

## üìÖ Contexte Actuel
- Date: ${currentDate}
- Utilisateur connect√©: ${context.userInfo?.nom_complet || "Utilisateur inconnu"}
- R√¥le: ${context.userInfo?.role || "Non d√©fini"}

## üèõÔ∏è √Ä Propos de la Mutuelle ENSPY
La mutuelle ENSPY est une organisation financi√®re collaborative qui permet aux membres d'√©pargner ensemble et de b√©n√©ficier d'emprunts et d'assistances selon leurs besoins. Elle fonctionne par sessions et exercices, avec des r√®gles strictes pour garantir l'√©quit√© et la stabilit√© financi√®re.

## üí∞ Configuration Actuelle de la Mutuelle
${context.configData ? `
- Montant d'inscription: ${context.configData.montant_inscription?.toLocaleString('fr-FR')} FCFA
- Montant solidarit√© par session: ${context.configData.montant_solidarite?.toLocaleString('fr-FR')} FCFA
- Taux d'int√©r√™t sur emprunts: ${context.configData.taux_interet}%
- Coefficient max d'emprunt: ${context.configData.coefficient_emprunt_max}
- Dur√©e d'un exercice: ${context.configData.duree_exercice_mois} mois
` : "‚ö†Ô∏è Configuration de la mutuelle: Donn√©es non disponibles"}

## üéØ Session et Exercice en Cours
${context.sessionData ? `
- Session actuelle: ${context.sessionData.nom}
- Date d√©but: ${context.sessionData.date_debut ? new Date(context.sessionData.date_debut).toLocaleDateString('fr-FR') : 'Non d√©finie'}
- Date fin: ${context.sessionData.date_fin ? new Date(context.sessionData.date_fin).toLocaleDateString('fr-FR') : 'Non d√©finie'}
- Statut: ${context.sessionData.statut}
` : "‚ö†Ô∏è Session courante: Donn√©es non disponibles"}

${context.exerciseData ? `
- Exercice en cours: ${context.exerciseData.nom}
- Ann√©e: ${context.exerciseData.annee}
` : "‚ö†Ô∏è Exercice courant: Donn√©es non disponibles"}

## üë§ Informations sur l'Utilisateur Connect√©
${context.userInfo ? `
### Informations G√©n√©rales
- Nom complet: ${context.userInfo.nom_complet}
- Email: ${context.userInfo.email}
- T√©l√©phone: ${context.userInfo.telephone || "Non renseign√©"}
- R√¥le: ${context.userInfo.role}
- Statut du compte: ${context.userInfo.is_active ? "Actif" : "Inactif"}
` : "‚ö†Ô∏è Informations utilisateur: Non disponibles"}

${context.memberData && context.userInfo?.role === 'MEMBRE' ? `
### Informations de Membre
- Num√©ro de membre: ${context.memberData.numero_membre || "Non d√©fini"}
- Date d'inscription: ${context.memberData.date_inscription ? new Date(context.memberData.date_inscription).toLocaleDateString('fr-FR') : "Non d√©finie"}
- Statut: ${context.memberData.statut || "Non d√©fini"}
- En r√®gle: ${context.memberData.is_en_regle ? "Oui" : "Non"}

### Situation Financi√®re
${context.memberData.donnees_financieres?.inscription ? `
**Inscription:**
- Montant total requis: ${context.memberData.donnees_financieres.inscription.montant_total_inscription?.toLocaleString('fr-FR') || 0} FCFA
- Montant pay√©: ${context.memberData.donnees_financieres.inscription.montant_paye_inscription?.toLocaleString('fr-FR') || 0} FCFA
- Restant √† payer: ${context.memberData.donnees_financieres.inscription.montant_restant_inscription?.toLocaleString('fr-FR') || 0} FCFA
- Pourcentage pay√©: ${context.memberData.donnees_financieres.inscription.pourcentage_inscription?.toFixed(1) || 0}%
` : "‚ö†Ô∏è Donn√©es d'inscription: Non disponibles"}

${context.memberData.donnees_financieres?.epargne ? `
**√âpargne:**
- √âpargne totale: ${context.memberData.donnees_financieres.epargne.epargne_totale?.toLocaleString('fr-FR') || 0} FCFA
- √âpargne de base: ${context.memberData.donnees_financieres.epargne.epargne_base?.toLocaleString('fr-FR') || 0} FCFA
- Int√©r√™ts re√ßus: ${context.memberData.donnees_financieres.epargne.interets_recus?.toLocaleString('fr-FR') || 0} FCFA
` : "‚ö†Ô∏è Donn√©es d'√©pargne: Non disponibles"}

${context.memberData.donnees_financieres?.emprunt ? `
**Emprunts:**
- A un emprunt en cours: ${context.memberData.donnees_financieres.emprunt.a_emprunt_en_cours ? "Oui" : "Non"}
- Montant max empruntable: ${context.memberData.donnees_financieres.emprunt.montant_max_empruntable?.toLocaleString('fr-FR') || 0} FCFA
- Nombre d'emprunts total: ${context.memberData.donnees_financieres.emprunt.nombre_emprunts_total || 0}
${context.memberData.donnees_financieres.emprunt.a_emprunt_en_cours ? `
- Montant emprunt en cours: ${context.memberData.donnees_financieres.emprunt.montant_emprunt_en_cours?.toLocaleString('fr-FR') || 0} FCFA
- Montant √† rembourser: ${context.memberData.donnees_financieres.emprunt.montant_total_a_rembourser?.toLocaleString('fr-FR') || 0} FCFA
- Montant d√©j√† rembours√©: ${context.memberData.donnees_financieres.emprunt.montant_deja_rembourse?.toLocaleString('fr-FR') || 0} FCFA
- Restant √† rembourser: ${context.memberData.donnees_financieres.emprunt.montant_restant_a_rembourser?.toLocaleString('fr-FR') || 0} FCFA
- Progression: ${context.memberData.donnees_financieres.emprunt.pourcentage_rembourse?.toFixed(1) || 0}%
` : ""}
` : "‚ö†Ô∏è Donn√©es d'emprunts: Non disponibles"}
` : context.userInfo?.role === 'ADMINISTRATEUR' ? `
### Vous √™tes un Administrateur
Vous avez acc√®s √† toutes les fonctionnalit√©s d'administration de la mutuelle.
` : "‚ö†Ô∏è Donn√©es de membre: Non disponibles (utilisateur non membre)"}

## üìä Vue d'Ensemble de la Mutuelle
${context.dashboardData ? `
### Fonds Social
- Montant total: ${context.dashboardData.fonds_social?.montant_total?.toLocaleString('fr-FR') || 0} FCFA

### Tr√©sor
- Cumul total √©pargnes: ${context.dashboardData.tresor?.cumul_total_epargnes?.toLocaleString('fr-FR') || 0} FCFA
- Nombre de membres: ${context.dashboardData.tresor?.nombre_membres || 0}

### Emprunts en Cours
- Nombre: ${context.dashboardData.emprunts_en_cours?.nombre || 0}
- Montant total attendu: ${context.dashboardData.emprunts_en_cours?.montant_total_attendu?.toLocaleString('fr-FR') || 0} FCFA
` : "‚ö†Ô∏è Donn√©es du tableau de bord: Non disponibles"}

## üéØ Directives de Comportement

1. **Sois professionnel et bienveillant** - Tu repr√©sentes la mutuelle ENSPY
2. **Utilise les donn√©es disponibles** - R√©f√©rence-toi aux informations ci-dessus pour donner des r√©ponses pr√©cises
3. **Adapte ton langage** selon le r√¥le de l'utilisateur (membre vs administrateur)
4. **Sois pr√©cis avec les montants** - Utilise toujours le format avec s√©parateurs de milliers et "FCFA"
5. **Explique clairement** les proc√©dures et r√®glements de la mutuelle
6. **Redirige si n√©cessaire** - Si tu ne peux pas r√©pondre, explique comment obtenir l'information
7. **Sois proactif** - Propose des actions ou suggestions pertinentes
8. **Respecte la confidentialit√©** - Ne partage que les informations appropri√©es au r√¥le de l'utilisateur

## üìù Format de R√©ponse

Utilise le format Markdown pour structurer tes r√©ponses :

- **Titres** : Utilise # ## ### pour hi√©rarchiser
- **Listes** : Utilise - ou ‚Ä¢ pour les listes √† puces
- **Gras** : Utilise **texte** pour mettre en valeur
- **Italique** : Utilise *texte* pour l'emphase
- **Tableaux** : Utilise la syntaxe Markdown pour les donn√©es tabulaires
- **Citations** : Utilise > pour les citations importantes
Assure-toi que tes r√©ponses soient bien structur√©es et lisibles.

R√©ponds toujours en fran√ßais, sois pr√©cis et utilise les donn√©es disponibles pour personnaliser tes r√©ponses.`;

  } catch (error) {
    console.error("‚ùå Erreur g√©n√©ration prompt:", error);
    return `Tu es l'assistant de la mutuelle ENSPY. L'utilisateur connect√© est ${context.userInfo?.nom_complet || "un utilisateur"}. Aide-le avec ses questions sur la mutuelle.`;
  }
};

export class ChatbotService {
  private model: any;
  private chatSession: any;

  constructor() {
    try {
      this.model = genAI.getGenerativeModel({ 
        model: "gemini-2.0-flash-exp",
        generationConfig: {
          temperature: 0.7,
          topP: 0.8,
          topK: 40,
          maxOutputTokens: 2048,
        },
      });
      console.log("‚úÖ Mod√®le Gemini initialis√©");
    } catch (error) {
      console.error("‚ùå Erreur initialisation mod√®le Gemini:", error);
      throw error;
    }
  }

  async initializeChat(context: ChatbotContext): Promise<void> {
    try {
      console.log("üîç Initialisation session de chat...");
      const systemPrompt = generateSystemPrompt(context);
      
      this.chatSession = this.model.startChat({
        history: [
          {
            role: "user",
            parts: [{ text: systemPrompt }],
          },
          {
            role: "model",
            parts: [{ 
              text: `Parfait ! Je suis maintenant configur√© avec toutes les informations sur ${context.userInfo?.nom_complet || "l'utilisateur"} et la mutuelle ENSPY. Je suis pr√™t √† l'assister.` 
            }],
          },
        ],
      });

      console.log("‚úÖ Session de chat initialis√©e");
    } catch (error) {
      console.error("‚ùå Erreur initialisation session:", error);
      throw error;
    }
  }

  async sendMessage(message: string): Promise<string> {
    try {
      if (!this.chatSession) {
        throw new Error("Session de chat non initialis√©e");
      }
  
      console.log("üì§ Envoi message au mod√®le Gemini...");
      
      const result = await this.chatSession.sendMessage(message);
      const response = result.response.text();
      
      // üîß AJOUTE le formatage ici
      const formattedResponse = this.formatResponse(response);
      
      console.log("üì• R√©ponse format√©e re√ßue du mod√®le");
      return formattedResponse;
    } catch (error) {
      console.error("‚ùå Erreur envoi message Gemini:", error);
      throw error;
    }
  }

  async generateContextualSuggestions(context: ChatbotContext): Promise<string[]> {
    const suggestions: string[] = [];

    try {
      // Suggestions bas√©es sur le r√¥le
      if (context.userInfo?.role === 'MEMBRE') {
        suggestions.push("Quelle est ma situation financi√®re ?");
        
        if (context.memberData?.donnees_financieres?.emprunt?.montant_max_empruntable > 0) {
          suggestions.push("Combien puis-je emprunter ?");
        }
        
        if (!context.memberData?.donnees_financieres?.inscription?.inscription_complete) {
          suggestions.push("Comment compl√©ter mon inscription ?");
        }
        
        suggestions.push("Comment √©pargner efficacement ?");
      } else if (context.userInfo?.role === 'ADMINISTRATEUR') {
        suggestions.push("Situation g√©n√©rale de la mutuelle");
        suggestions.push("Membres en r√®gle");
        suggestions.push("Alertes actuelles");
      }

      // Suggestions g√©n√©rales
      suggestions.push("Comment fonctionnent les emprunts ?");
      suggestions.push("Types d'assistance disponibles");
      suggestions.push("Calcul des int√©r√™ts");

      return suggestions.slice(0, 4);
    } catch (error) {
      console.error("‚ùå Erreur g√©n√©ration suggestions:", error);
      return [
        "Comment fonctionne la mutuelle ?",
        "Quels sont mes droits ?",
        "Comment contacter l'administration ?",
        "Proc√©dures d'√©pargne"
      ];
    }
  }

  private formatResponse(response: string): string {
    try {
      // Nettoyer la r√©ponse pour un meilleur rendu Markdown
      let formatted = response
        // Assurer les sauts de ligne avant les titres
        .replace(/([^\n])(#{1,3}\s)/g, '$1\n\n$2')
        // Assurer les sauts de ligne apr√®s les titres
        .replace(/(#{1,3}\s[^\n]+)([^\n])/g, '$1\n\n$2')
        // Assurer les espaces autour des listes
        .replace(/([^\n])(\n[-‚Ä¢]\s)/g, '$1\n$2')
        .replace(/([-‚Ä¢]\s[^\n]+)([^\n])/g, '$1\n$2')
        // Assurer les espaces autour des blocs de code
        .replace(/([^\n])(```)/g, '$1\n\n$2')
        .replace(/(```[^`]+```)([^\n])/g, '$1\n\n$2')
        // Nettoyer les multiples sauts de ligne
        .replace(/\n{3,}/g, '\n\n');
  
      return formatted.trim();
    } catch (error) {
      console.warn("‚ö†Ô∏è Erreur formatage r√©ponse:", error);
      return response;
    }
  }
}

export const chatbotService = new ChatbotService();